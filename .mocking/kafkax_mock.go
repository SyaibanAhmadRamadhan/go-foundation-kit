// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SyaibanAhmadRamadhan/go-foundation-kit/broker/kafkax (interfaces: KafkaTracerPub,KafkaTracerConsume,KafkaTracerCommitMessage,KafkaPubSub)
//
// Generated by this command:
//
//	mockgen -destination=../../.mocking/kafkax_mock.go -package=gofoundationkitmock . KafkaTracerPub,KafkaTracerConsume,KafkaTracerCommitMessage,KafkaPubSub
//

// Package gofoundationkitmock is a generated GoMock package.
package gofoundationkitmock

import (
	context "context"
	reflect "reflect"

	kafkax "github.com/SyaibanAhmadRamadhan/go-foundation-kit/broker/kafkax"
	kafka "github.com/segmentio/kafka-go"
	gomock "go.uber.org/mock/gomock"
)

// MockKafkaTracerPub is a mock of KafkaTracerPub interface.
type MockKafkaTracerPub struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaTracerPubMockRecorder
	isgomock struct{}
}

// MockKafkaTracerPubMockRecorder is the mock recorder for MockKafkaTracerPub.
type MockKafkaTracerPubMockRecorder struct {
	mock *MockKafkaTracerPub
}

// NewMockKafkaTracerPub creates a new mock instance.
func NewMockKafkaTracerPub(ctrl *gomock.Controller) *MockKafkaTracerPub {
	mock := &MockKafkaTracerPub{ctrl: ctrl}
	mock.recorder = &MockKafkaTracerPubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaTracerPub) EXPECT() *MockKafkaTracerPubMockRecorder {
	return m.recorder
}

// TracePubEnd mocks base method.
func (m *MockKafkaTracerPub) TracePubEnd(ctx context.Context, input kafkax.PubOutput, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TracePubEnd", ctx, input, err)
}

// TracePubEnd indicates an expected call of TracePubEnd.
func (mr *MockKafkaTracerPubMockRecorder) TracePubEnd(ctx, input, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracePubEnd", reflect.TypeOf((*MockKafkaTracerPub)(nil).TracePubEnd), ctx, input, err)
}

// TracePubStart mocks base method.
func (m *MockKafkaTracerPub) TracePubStart(ctx context.Context, msg *kafka.Message) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TracePubStart", ctx, msg)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// TracePubStart indicates an expected call of TracePubStart.
func (mr *MockKafkaTracerPubMockRecorder) TracePubStart(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracePubStart", reflect.TypeOf((*MockKafkaTracerPub)(nil).TracePubStart), ctx, msg)
}

// MockKafkaTracerConsume is a mock of KafkaTracerConsume interface.
type MockKafkaTracerConsume struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaTracerConsumeMockRecorder
	isgomock struct{}
}

// MockKafkaTracerConsumeMockRecorder is the mock recorder for MockKafkaTracerConsume.
type MockKafkaTracerConsumeMockRecorder struct {
	mock *MockKafkaTracerConsume
}

// NewMockKafkaTracerConsume creates a new mock instance.
func NewMockKafkaTracerConsume(ctrl *gomock.Controller) *MockKafkaTracerConsume {
	mock := &MockKafkaTracerConsume{ctrl: ctrl}
	mock.recorder = &MockKafkaTracerConsumeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaTracerConsume) EXPECT() *MockKafkaTracerConsumeMockRecorder {
	return m.recorder
}

// TraceConsumeEnd mocks base method.
func (m *MockKafkaTracerConsume) TraceConsumeEnd(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TraceConsumeEnd", ctx, err)
}

// TraceConsumeEnd indicates an expected call of TraceConsumeEnd.
func (mr *MockKafkaTracerConsumeMockRecorder) TraceConsumeEnd(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceConsumeEnd", reflect.TypeOf((*MockKafkaTracerConsume)(nil).TraceConsumeEnd), ctx, err)
}

// TraceConsumeStart mocks base method.
func (m *MockKafkaTracerConsume) TraceConsumeStart(ctx context.Context, groupID string, msg *kafka.Message) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceConsumeStart", ctx, groupID, msg)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// TraceConsumeStart indicates an expected call of TraceConsumeStart.
func (mr *MockKafkaTracerConsumeMockRecorder) TraceConsumeStart(ctx, groupID, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceConsumeStart", reflect.TypeOf((*MockKafkaTracerConsume)(nil).TraceConsumeStart), ctx, groupID, msg)
}

// MockKafkaTracerCommitMessage is a mock of KafkaTracerCommitMessage interface.
type MockKafkaTracerCommitMessage struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaTracerCommitMessageMockRecorder
	isgomock struct{}
}

// MockKafkaTracerCommitMessageMockRecorder is the mock recorder for MockKafkaTracerCommitMessage.
type MockKafkaTracerCommitMessageMockRecorder struct {
	mock *MockKafkaTracerCommitMessage
}

// NewMockKafkaTracerCommitMessage creates a new mock instance.
func NewMockKafkaTracerCommitMessage(ctrl *gomock.Controller) *MockKafkaTracerCommitMessage {
	mock := &MockKafkaTracerCommitMessage{ctrl: ctrl}
	mock.recorder = &MockKafkaTracerCommitMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaTracerCommitMessage) EXPECT() *MockKafkaTracerCommitMessageMockRecorder {
	return m.recorder
}

// TraceCommitMessagesEnd mocks base method.
func (m *MockKafkaTracerCommitMessage) TraceCommitMessagesEnd(ctx []context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TraceCommitMessagesEnd", ctx, err)
}

// TraceCommitMessagesEnd indicates an expected call of TraceCommitMessagesEnd.
func (mr *MockKafkaTracerCommitMessageMockRecorder) TraceCommitMessagesEnd(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceCommitMessagesEnd", reflect.TypeOf((*MockKafkaTracerCommitMessage)(nil).TraceCommitMessagesEnd), ctx, err)
}

// TraceCommitMessagesStart mocks base method.
func (m *MockKafkaTracerCommitMessage) TraceCommitMessagesStart(ctx context.Context, groupID string, messages ...kafka.Message) []context.Context {
	m.ctrl.T.Helper()
	varargs := []any{ctx, groupID}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceCommitMessagesStart", varargs...)
	ret0, _ := ret[0].([]context.Context)
	return ret0
}

// TraceCommitMessagesStart indicates an expected call of TraceCommitMessagesStart.
func (mr *MockKafkaTracerCommitMessageMockRecorder) TraceCommitMessagesStart(ctx, groupID any, messages ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, groupID}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceCommitMessagesStart", reflect.TypeOf((*MockKafkaTracerCommitMessage)(nil).TraceCommitMessagesStart), varargs...)
}

// MockKafkaPubSub is a mock of KafkaPubSub interface.
type MockKafkaPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaPubSubMockRecorder
	isgomock struct{}
}

// MockKafkaPubSubMockRecorder is the mock recorder for MockKafkaPubSub.
type MockKafkaPubSubMockRecorder struct {
	mock *MockKafkaPubSub
}

// NewMockKafkaPubSub creates a new mock instance.
func NewMockKafkaPubSub(ctrl *gomock.Controller) *MockKafkaPubSub {
	mock := &MockKafkaPubSub{ctrl: ctrl}
	mock.recorder = &MockKafkaPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaPubSub) EXPECT() *MockKafkaPubSubMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockKafkaPubSub) Publish(ctx context.Context, input kafkax.PubInput) (kafkax.PubOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, input)
	ret0, _ := ret[0].(kafkax.PubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockKafkaPubSubMockRecorder) Publish(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockKafkaPubSub)(nil).Publish), ctx, input)
}

// Subscribe mocks base method.
func (m *MockKafkaPubSub) Subscribe(ctx context.Context, input kafkax.SubInput) (kafkax.SubOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, input)
	ret0, _ := ret[0].(kafkax.SubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockKafkaPubSubMockRecorder) Subscribe(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockKafkaPubSub)(nil).Subscribe), ctx, input)
}
