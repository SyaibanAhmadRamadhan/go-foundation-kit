// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SyaibanAhmadRamadhan/go-foundation-kit/databases/sqlx (interfaces: RDBMS,ReadQuery,WriterCommand,Tx)
//
// Generated by this command:
//
//	mockgen -destination=../../.mocking/sqlx_mock/sqlx_mock.go -package=sqlx_mock . RDBMS,ReadQuery,WriterCommand,Tx
//

// Package sqlx_mock is a generated GoMock package.
package sqlx_mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	squirrel "github.com/Masterminds/squirrel"
	sqlx "github.com/SyaibanAhmadRamadhan/go-foundation-kit/databases/sqlx"
	primitive "github.com/SyaibanAhmadRamadhan/go-foundation-kit/utils/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockRDBMS is a mock of RDBMS interface.
type MockRDBMS struct {
	ctrl     *gomock.Controller
	recorder *MockRDBMSMockRecorder
	isgomock struct{}
}

// MockRDBMSMockRecorder is the mock recorder for MockRDBMS.
type MockRDBMSMockRecorder struct {
	mock *MockRDBMS
}

// NewMockRDBMS creates a new mock instance.
func NewMockRDBMS(ctrl *gomock.Controller) *MockRDBMS {
	mock := &MockRDBMS{ctrl: ctrl}
	mock.recorder = &MockRDBMSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDBMS) EXPECT() *MockRDBMSMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockRDBMS) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockRDBMSMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockRDBMS)(nil).ExecContext), varargs...)
}

// ExecSq mocks base method.
func (m *MockRDBMS) ExecSq(ctx context.Context, query squirrel.Sqlizer, useStmt bool) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecSq", ctx, query, useStmt)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecSq indicates an expected call of ExecSq.
func (mr *MockRDBMSMockRecorder) ExecSq(ctx, query, useStmt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSq", reflect.TypeOf((*MockRDBMS)(nil).ExecSq), ctx, query, useStmt)
}

// ExecStmtContext mocks base method.
func (m *MockRDBMS) ExecStmtContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecStmtContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecStmtContext indicates an expected call of ExecStmtContext.
func (mr *MockRDBMSMockRecorder) ExecStmtContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecStmtContext", reflect.TypeOf((*MockRDBMS)(nil).ExecStmtContext), varargs...)
}

// PrepareContext mocks base method.
func (m *MockRDBMS) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockRDBMSMockRecorder) PrepareContext(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockRDBMS)(nil).PrepareContext), ctx, query)
}

// QueryContext mocks base method.
func (m *MockRDBMS) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockRDBMSMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockRDBMS)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockRDBMS) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockRDBMSMockRecorder) QueryRowContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockRDBMS)(nil).QueryRowContext), varargs...)
}

// QueryRowSq mocks base method.
func (m *MockRDBMS) QueryRowSq(ctx context.Context, query squirrel.Sqlizer, useStmt bool) (*sql.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRowSq", ctx, query, useStmt)
	ret0, _ := ret[0].(*sql.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRowSq indicates an expected call of QueryRowSq.
func (mr *MockRDBMSMockRecorder) QueryRowSq(ctx, query, useStmt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowSq", reflect.TypeOf((*MockRDBMS)(nil).QueryRowSq), ctx, query, useStmt)
}

// QueryRowStmtContext mocks base method.
func (m *MockRDBMS) QueryRowStmtContext(ctx context.Context, query string, args ...any) (*sql.Row, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowStmtContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRowStmtContext indicates an expected call of QueryRowStmtContext.
func (mr *MockRDBMSMockRecorder) QueryRowStmtContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowStmtContext", reflect.TypeOf((*MockRDBMS)(nil).QueryRowStmtContext), varargs...)
}

// QuerySq mocks base method.
func (m *MockRDBMS) QuerySq(ctx context.Context, query squirrel.Sqlizer, useStmt bool, fn func(*sql.Rows) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySq", ctx, query, useStmt, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuerySq indicates an expected call of QuerySq.
func (mr *MockRDBMSMockRecorder) QuerySq(ctx, query, useStmt, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySq", reflect.TypeOf((*MockRDBMS)(nil).QuerySq), ctx, query, useStmt, fn)
}

// QuerySqPagination mocks base method.
func (m *MockRDBMS) QuerySqPagination(ctx context.Context, countQuery, query squirrel.SelectBuilder, useStmt bool, paginationInput primitive.PaginationInput, fn func(*sql.Rows) error) (primitive.PaginationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySqPagination", ctx, countQuery, query, useStmt, paginationInput, fn)
	ret0, _ := ret[0].(primitive.PaginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySqPagination indicates an expected call of QuerySqPagination.
func (mr *MockRDBMSMockRecorder) QuerySqPagination(ctx, countQuery, query, useStmt, paginationInput, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySqPagination", reflect.TypeOf((*MockRDBMS)(nil).QuerySqPagination), ctx, countQuery, query, useStmt, paginationInput, fn)
}

// QueryStmtContext mocks base method.
func (m *MockRDBMS) QueryStmtContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryStmtContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStmtContext indicates an expected call of QueryStmtContext.
func (mr *MockRDBMSMockRecorder) QueryStmtContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStmtContext", reflect.TypeOf((*MockRDBMS)(nil).QueryStmtContext), varargs...)
}

// MockReadQuery is a mock of ReadQuery interface.
type MockReadQuery struct {
	ctrl     *gomock.Controller
	recorder *MockReadQueryMockRecorder
	isgomock struct{}
}

// MockReadQueryMockRecorder is the mock recorder for MockReadQuery.
type MockReadQueryMockRecorder struct {
	mock *MockReadQuery
}

// NewMockReadQuery creates a new mock instance.
func NewMockReadQuery(ctrl *gomock.Controller) *MockReadQuery {
	mock := &MockReadQuery{ctrl: ctrl}
	mock.recorder = &MockReadQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadQuery) EXPECT() *MockReadQueryMockRecorder {
	return m.recorder
}

// QueryRowSq mocks base method.
func (m *MockReadQuery) QueryRowSq(ctx context.Context, query squirrel.Sqlizer, useStmt bool) (*sql.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRowSq", ctx, query, useStmt)
	ret0, _ := ret[0].(*sql.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRowSq indicates an expected call of QueryRowSq.
func (mr *MockReadQueryMockRecorder) QueryRowSq(ctx, query, useStmt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowSq", reflect.TypeOf((*MockReadQuery)(nil).QueryRowSq), ctx, query, useStmt)
}

// QuerySq mocks base method.
func (m *MockReadQuery) QuerySq(ctx context.Context, query squirrel.Sqlizer, useStmt bool, fn func(*sql.Rows) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySq", ctx, query, useStmt, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuerySq indicates an expected call of QuerySq.
func (mr *MockReadQueryMockRecorder) QuerySq(ctx, query, useStmt, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySq", reflect.TypeOf((*MockReadQuery)(nil).QuerySq), ctx, query, useStmt, fn)
}

// QuerySqPagination mocks base method.
func (m *MockReadQuery) QuerySqPagination(ctx context.Context, countQuery, query squirrel.SelectBuilder, useStmt bool, paginationInput primitive.PaginationInput, fn func(*sql.Rows) error) (primitive.PaginationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySqPagination", ctx, countQuery, query, useStmt, paginationInput, fn)
	ret0, _ := ret[0].(primitive.PaginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySqPagination indicates an expected call of QuerySqPagination.
func (mr *MockReadQueryMockRecorder) QuerySqPagination(ctx, countQuery, query, useStmt, paginationInput, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySqPagination", reflect.TypeOf((*MockReadQuery)(nil).QuerySqPagination), ctx, countQuery, query, useStmt, paginationInput, fn)
}

// MockWriterCommand is a mock of WriterCommand interface.
type MockWriterCommand struct {
	ctrl     *gomock.Controller
	recorder *MockWriterCommandMockRecorder
	isgomock struct{}
}

// MockWriterCommandMockRecorder is the mock recorder for MockWriterCommand.
type MockWriterCommandMockRecorder struct {
	mock *MockWriterCommand
}

// NewMockWriterCommand creates a new mock instance.
func NewMockWriterCommand(ctrl *gomock.Controller) *MockWriterCommand {
	mock := &MockWriterCommand{ctrl: ctrl}
	mock.recorder = &MockWriterCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriterCommand) EXPECT() *MockWriterCommandMockRecorder {
	return m.recorder
}

// ExecSq mocks base method.
func (m *MockWriterCommand) ExecSq(ctx context.Context, query squirrel.Sqlizer, useStmt bool) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecSq", ctx, query, useStmt)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecSq indicates an expected call of ExecSq.
func (mr *MockWriterCommandMockRecorder) ExecSq(ctx, query, useStmt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSq", reflect.TypeOf((*MockWriterCommand)(nil).ExecSq), ctx, query, useStmt)
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
	isgomock struct{}
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// DoTxContext mocks base method.
func (m *MockTx) DoTxContext(ctx context.Context, opt *sql.TxOptions, fn func(context.Context, sqlx.RDBMS) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTxContext", ctx, opt, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoTxContext indicates an expected call of DoTxContext.
func (mr *MockTxMockRecorder) DoTxContext(ctx, opt, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTxContext", reflect.TypeOf((*MockTx)(nil).DoTxContext), ctx, opt, fn)
}
