// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SyaibanAhmadRamadhan/go-foundation-kit/databases/sqlx (interfaces: DBHook)
//
// Generated by this command:
//
//	mockgen -destination=../../.mocking/sqlx_mock/sqlx_hook_mock.go -package=sqlx_mock . DBHook
//

// Package sqlx_mock is a generated GoMock package.
package sqlx_mock

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/SyaibanAhmadRamadhan/go-foundation-kit/databases/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHook is a mock of DBHook interface.
type MockDBHook struct {
	ctrl     *gomock.Controller
	recorder *MockDBHookMockRecorder
	isgomock struct{}
}

// MockDBHookMockRecorder is the mock recorder for MockDBHook.
type MockDBHookMockRecorder struct {
	mock *MockDBHook
}

// NewMockDBHook creates a new mock instance.
func NewMockDBHook(ctrl *gomock.Controller) *MockDBHook {
	mock := &MockDBHook{ctrl: ctrl}
	mock.recorder = &MockDBHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHook) EXPECT() *MockDBHookMockRecorder {
	return m.recorder
}

// After mocks base method.
func (m *MockDBHook) After(ctx context.Context, info *sqlx.HookInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "After", ctx, info)
}

// After indicates an expected call of After.
func (mr *MockDBHookMockRecorder) After(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockDBHook)(nil).After), ctx, info)
}

// Before mocks base method.
func (m *MockDBHook) Before(ctx context.Context, info *sqlx.HookInfo) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Before", ctx, info)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Before indicates an expected call of Before.
func (mr *MockDBHookMockRecorder) Before(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Before", reflect.TypeOf((*MockDBHook)(nil).Before), ctx, info)
}
